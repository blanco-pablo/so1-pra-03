{"version":3,"sources":["components/LoginSection.jsx","components/ProcessesSection.jsx","components/CPUSection.jsx","components/RAMSection.jsx","App.js","serviceWorker.js","index.js"],"names":["sleep","ms","Promise","resolve","setTimeout","LoginSection","onFormSubmit","values","a","setSubmitting","resetForm","console","log","username","password","props","onLoginSuccess","message","error","validationSchema","Yup","shape","required","style","title","width","margin","onSubmit","this","initialValues","layout","Item","label","name","prefix","type","color","placeholder","React","Component","ProcessesSection","getProcesses","setState","tableLoading","axios","get","response","processes","data","forEach","p","key","pid","tableDataSource","killProcess","record","success","status","headers","state","columns","dataIndex","onFilter","value","render","text","okText","cancelText","onConfirm","runningCount","filter","includes","length","sleepingCount","stoppedCount","zombieCount","idleCount","diskSleepCount","background","padding","xs","span","offset","lg","onClick","size","loading","dataSource","CPUSection","lastValue","charLen","updateChar","cpuDelta","total","cpuValue","uv","idle","slice","push","Array","apply","map","x","i","cpuUsage","toFixed","height","dataKey","stroke","domain","RAMSection","totalMb","usedMb","used","usage","last","textAlign","parseInt","App","logged","className","dotPosition","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3aab9ff.chunk.js","sourcesContent":["import React from 'react';\n\n\nimport {Card, Icon, message} from \"antd\";\n\nimport * as Yup from \"yup\";\nimport {Formik} from \"formik\";\nimport {Form, Input, InputNumber, ResetButton, SubmitButton} from \"@jbuschke/formik-antd\";\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// onLoginSuccess\nexport default class LoginSection extends React.Component {\n\n\n    onFormSubmit = async (values, {setSubmitting, resetForm}) => {\n        console.log('los valores son ');\n        console.log(values);\n\n        await sleep(500);\n\n        if (values.username === 'admin' && values.password === 'admin') {\n            this.props.onLoginSuccess();\n        } else {\n            message.error('Credenciales incorrectas');\n        }\n\n        setSubmitting(false);\n    };\n\n\n\n    render() {\n\n        const validationSchema = Yup.object().shape({\n            username: Yup.string()\n                .required('Username es requerido'),\n            password: Yup.string()\n                .required('Password es requerido')\n        });\n\n        return (<div style={{ }}>\n            <Card title=\"Login\" style={{width: 800, margin: \"50px auto\" }}>\n\n            <Formik\n                validationSchema={validationSchema}\n                onSubmit={this.onFormSubmit}\n                initialValues={ {username: \"\", password: \"\"} }\n            >\n                {() => (\n                    <Form layout=\"inline\" >\n\n                        <Form.Item label=\"Username\" name=\"username\">\n                            <Input\n                                prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                name=\"username\"\n                                placeholder=\"Username\" />\n                        </Form.Item>\n\n                        <Form.Item label=\"Password\" name=\"password\">\n                            <Input\n                                prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                name=\"password\"\n                                type=\"password\"\n                                placeholder=\"Password\" />\n                        </Form.Item>\n\n                        <SubmitButton>Log in</SubmitButton>\n                    </Form>\n                )}\n\n            </Formik>\n\n        </Card>\n        </div>);\n    }\n}","import React from 'react';\nimport axios from 'axios';\nimport {Button, Icon, message, Table, Popconfirm, Row, Col, Statistic} from 'antd'\n\nexport default class ProcessesSection extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {tableLoading:false, tableDataSource: []};\n    }\n\n    componentDidMount() {\n\n        this.getProcesses();\n    }\n\n    getProcesses = async () => {\n\n        console.log('soy llamado');\n\n        this.setState({ tableLoading: true });\n\n        try {\n            const response = await axios.get('/processes');\n            const processes = response.data;\n            processes.forEach(p => p.key = p.pid);\n            this.setState({ tableLoading: false, tableDataSource: processes });\n        }\n        catch (e) {\n            console.log('ocurrio un error');\n            console.log(e);\n            message.error('ocurrio un error al obtener los procesos');\n\n            this.setState({ tableLoading: false, tableDataSource: [] });\n        }\n    };\n\n    killProcess = async (record) => {\n\n        // const hide = message.loading('Matando...', 0);\n\n        try {\n            console.log('a punto de matar al proceso:', record.name, 'con pid:', record.pid);\n\n            const response = await axios.get(`/kill/${record.pid}`);\n            console.log(response);\n\n            // hide();\n            message.success(`Proceso '${record.name}' con pid ${record.pid} matado`);\n            this.getProcesses();\n        }\n        catch (e) {\n            console.log('ocurrio un error');\n            console.log(e);\n            console.log(e.response.data);\n            console.log(e.response.status);\n            console.log(e.response.headers);\n\n            // hide();\n            message.error('No se pudo matar el proceso');\n        }\n    };\n\n    render() {\n\n        const columns = [\n            {\n                title: 'PID',\n                dataIndex: 'pid',\n                key: 'key',\n                onFilter: (value, record) => true\n            },\n            {\n                title: 'Nombre',\n                dataIndex: 'name',\n                key: 'name'\n            },\n            {\n                title: 'Estado',\n                dataIndex: 'state',\n                key: 'state'\n            },\n\n            {\n                title: 'Usuario',\n                dataIndex: 'uid',\n                key: 'uid'\n            },\n\n            {\n                title: 'Acciones',\n                key: 'action',\n                render: (text, record) => (\n                    <span>\n                        <Popconfirm\n                            title=\"Matar este proceso?\"\n                            okText=\"Si\"\n                            cancelText=\"No\"\n                            onConfirm={() => {\n                                this.killProcess(record);\n                            }}\n                        >\n                        <a><Icon type=\"close-circle\" /> Matar</a>\n                        </Popconfirm>\n                    </span>\n                )\n            }\n        ];\n\n\n        const runningCount = this.state.tableDataSource.filter(p => p.state.includes(\"running\")).length;\n        const sleepingCount = this.state.tableDataSource.filter(p => p.state.includes(\"sleeping\")).length;\n        const stoppedCount = this.state.tableDataSource.filter(p => p.state.includes(\"stopped\")).length;\n        const zombieCount = this.state.tableDataSource.filter(p => p.state.includes(\"zombie\")).length;\n        const idleCount = this.state.tableDataSource.filter(p => p.state.includes(\"idle\")).length;\n        const diskSleepCount = this.state.tableDataSource.filter(p => p.state.includes(\"disk sleep\")).length;\n\n\n        return (<div style={{ background: \"white\", padding: \"8px\" }}>\n\n            <Row>\n                <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}>\n                    <Statistic title=\"Total Procesos\" value={this.state.tableDataSource.length} />\n                </Col>\n                <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}>\n                    <Statistic title=\"Running\" value={runningCount}  />\n                </Col>\n                <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}>\n                    <Statistic title=\"Sleeping\" value={sleepingCount}  />\n                </Col>\n                <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}>\n                    <Statistic title=\"Stopped\" value={stoppedCount}  />\n                </Col>\n                <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}>\n                    <Statistic title=\"Idle\" value={idleCount}  />\n                </Col>\n                <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}>\n                    <Statistic title=\"Disk Sleep\" value={diskSleepCount}  />\n                </Col>\n                <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}>\n                    <Statistic title=\"Zombie\" value={zombieCount}  />\n                </Col>\n            </Row>\n\n            <Button onClick={this.getProcesses} >\n                <Icon type=\"sync\" />Actualizar\n            </Button>\n            <Table\n                size=\"middle\"\n                loading={this.state.tableLoading}\n                dataSource={this.state.tableDataSource}\n                columns={columns}\n            />\n        </div>);\n    }\n}","import React from 'react';\nimport axios from 'axios';\nimport {LineChart, Line, YAxis, XAxis, CartesianGrid} from \"recharts\";\nimport {Button, message, Statistic} from \"antd\";\n\nexport default class CPUSection extends React.Component {\n\n    lastValue = null;\n    charLen = 40;\n\n    constructor(props){\n        super(props);\n\n        const data = Array.apply(null, Array(this.charLen))\n            .map((x, i) => ({ uv: 0 }) );\n\n        this.state = { data: data };\n    }\n\n    componentDidMount() {\n        this.updateChar();\n    }\n\n    updateChar = async () => {\n\n        function sleep(ms) {\n            return new Promise(resolve => setTimeout(resolve, ms));\n        }\n\n        try {\n            while (true){\n\n                const response = await axios.get('/cpu');\n                await sleep(1000);\n                // console.log('obtuve del server:', response.data);\n\n                if (this.lastValue) {\n                    const cpuDelta = response.data.total - this.lastValue.total;\n                    const cpuIdle = response.data.idle - this.lastValue.idle;\n                    const cpuUsed = cpuDelta - cpuIdle;\n                    const cpuUsage = 100 * cpuUsed / cpuDelta;\n\n                    const cpuValue = { uv: cpuUsage };\n\n                    this.setState((state, props) => {\n                        const data = state.data.slice(1);\n                        data.push(cpuValue);\n                        return { data: data };\n                    });\n                }\n\n                this.lastValue = response.data;\n            }\n        }\n        catch (e) {\n            console.log('ocurrio un error');\n            console.log(e);\n            message.error(\"Ocurrio un error, ya no se pudo actualizar\");\n        }\n    };\n\n\n    render() {\n\n        const cpuUsage = this.state.data[this.state.data.length - 1].uv;\n\n        return (\n            <div style={{ background: \"white\" }}>\n\n                <Statistic title=\"CPU%\" value={cpuUsage.toFixed(2)}  />\n\n                <LineChart style={{ margin: \"0 auto\" }} width={1200} height={400} data={this.state.data} >\n                    <Line type=\"monotone\" dataKey=\"uv\" stroke=\"blue\" />\n                    <CartesianGrid stroke=\"#ccc\" />\n                    <XAxis  />\n                    <YAxis domain={[0, 100]} />\n                </LineChart>\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport axios from 'axios';\nimport {LineChart, Line, YAxis, XAxis, CartesianGrid} from \"recharts\";\nimport {Button, message, Statistic} from \"antd\";\n\nexport default class RAMSection extends React.Component {\n\n    lastValue = null;\n    charLen = 40;\n\n    constructor(props){\n        super(props);\n\n        const data = Array.apply(null, Array(this.charLen))\n            .map((x, i) => ({ totalMb: 0, usedMb: 0, total: 0, used: 0, usage: 0 }) );\n\n        this.state = { data: data };\n    }\n\n    componentDidMount() {\n        this.updateChar();\n    }\n\n    updateChar = async () => {\n\n        function sleep(ms) {\n            return new Promise(resolve => setTimeout(resolve, ms));\n        }\n\n        try {\n            while (true){\n\n                const response = await axios.get('/ram');\n                await sleep(1000);\n\n                this.setState((state, props) => {\n                    const values = state.data.slice(1);\n                    values.push(response.data);\n                    return { data: values };\n                });\n            }\n        }\n        catch (e) {\n            console.log('ocurrio un error');\n            console.log(e);\n            message.error(\"Ocurrio un error, ya no se pudo actualizar\");\n        }\n    };\n\n\n    render() {\n\n        const last = this.state.data[this.state.data.length - 1];\n\n        return (\n            <div style={{ background: \"white\", textAlign: \"center\" }}>\n\n                <Statistic title=\"Total MB\" value={last.totalMb.toFixed(2)}  />\n                <Statistic title=\"Usado MB\" value={last.usedMb.toFixed(2)}  />\n                <Statistic title=\"RAM%\" value={last.usage.toFixed(2)}  />\n\n                <LineChart style={{ margin: \"0 auto\" }} width={1200} height={400} data={this.state.data} >\n                    <Line type=\"monotone\" dataKey=\"usedMb\" stroke=\"blue\" />\n                    <CartesianGrid stroke=\"#ccc\" />\n                    <XAxis  />\n                    <YAxis domain={[0, parseInt(last.totalMb, 10) ]} />\n                </LineChart>\n\n            </div>\n        );\n    }\n\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport LoginSection from \"./components/LoginSection\";\nimport ProcessesSection from \"./components/ProcessesSection\";\nimport {Carousel} from \"antd\";\nimport CPUSection from \"./components/CPUSection\";\nimport RAMSection from \"./components/RAMSection\";\n\n\nexport default class App extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = { logged: false };\n    }\n\n    onLoginSuccess = () => {\n        this.setState({ logged: true })\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                { !this.state.logged && <LoginSection onLoginSuccess={this.onLoginSuccess} /> }\n\n                { this.state.logged && (<Carousel dotPosition=\"top\"  >\n                    <div key=\"1\">\n                        <h3>Procesos</h3>\n                        <ProcessesSection />\n                    </div>\n                    <div key=\"2\">\n                        <h3>CPU</h3>\n                        <CPUSection />\n                    </div>\n                    <div key=\"3\">\n                        <h3>Ram</h3>\n                        <RAMSection />\n                    </div>\n\n                </Carousel>) }\n\n\n\n\n            </div>\n        );\n    }\n\n}\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//         <Login/>\n//     </div>\n//   );\n// }\n//\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}